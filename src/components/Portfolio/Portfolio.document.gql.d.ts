/* 5ed78d2afcd7711fb05da8e6f398a2208205cfd4
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo } from 'graphql';
import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export declare type RequireFields<T, K extends keyof T> = {
    [X in Exclude<keyof T, K>]?: T[X];
} & {
    [P in K]-?: NonNullable<T[P]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type Portfolio = {
    __typename?: 'Portfolio';
    cash?: Maybe<Scalars['Float']>;
    openPositions?: Maybe<Array<Position>>;
};
export declare type Position = {
    __typename?: 'Position';
    symbol: Scalars['String'];
    numberOfShares: Scalars['Float'];
    changeUSD: Scalars['Float'];
    changePercent: Scalars['Float'];
    averagePrice: Scalars['Float'];
    costBasis: Scalars['Float'];
    currentPrice: Scalars['Float'];
    profitLossPercent: Scalars['Float'];
    profitLossUSD: Scalars['Float'];
    dailyProfitLossUSD: Scalars['Float'];
    exposure: Scalars['Float'];
};
export declare type Query = {
    __typename?: 'Query';
    portfolio?: Maybe<Portfolio>;
};
export declare type PositionInput = {
    symbol: Scalars['String'];
    numberOfShares: Scalars['Float'];
    averagePrice: Scalars['Float'];
};
export declare type Mutation = {
    __typename?: 'Mutation';
    addPosition?: Maybe<Portfolio>;
    addCash?: Maybe<Portfolio>;
    closePosition?: Maybe<Portfolio>;
};
export declare type MutationAddPositionArgs = {
    position: PositionInput;
};
export declare type MutationAddCashArgs = {
    amountInUSD: Scalars['Float'];
};
export declare type MutationClosePositionArgs = {
    symbol: Scalars['String'];
    numberOfShares: Scalars['Float'];
};
export declare type PortfolioQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type PortfolioQuery = ({
    __typename?: 'Query';
} & {
    portfolio?: Maybe<({
        __typename?: 'Portfolio';
    } & Pick<Portfolio, 'cash'> & {
        openPositions?: Maybe<Array<({
            __typename?: 'Position';
        } & Pick<Position, 'symbol' | 'currentPrice' | 'averagePrice' | 'numberOfShares' | 'profitLossPercent' | 'profitLossUSD'>)>>;
    })>;
});
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = {
    Portfolio: ResolverTypeWrapper<Portfolio>;
    Float: ResolverTypeWrapper<Scalars['Float']>;
    Position: ResolverTypeWrapper<Position>;
    String: ResolverTypeWrapper<Scalars['String']>;
    Query: ResolverTypeWrapper<{}>;
    PositionInput: PositionInput;
    Mutation: ResolverTypeWrapper<{}>;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
};
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = {
    Portfolio: Portfolio;
    Float: Scalars['Float'];
    Position: Position;
    String: Scalars['String'];
    Query: {};
    PositionInput: PositionInput;
    Mutation: {};
    Boolean: Scalars['Boolean'];
};
export declare type PortfolioResolvers<ContextType = any, ParentType extends ResolversParentTypes['Portfolio'] = ResolversParentTypes['Portfolio']> = {
    cash?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    openPositions?: Resolver<Maybe<Array<ResolversTypes['Position']>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};
export declare type PositionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Position'] = ResolversParentTypes['Position']> = {
    symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    numberOfShares?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    changeUSD?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    changePercent?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    averagePrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    costBasis?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    currentPrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    profitLossPercent?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    profitLossUSD?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    dailyProfitLossUSD?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    exposure?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};
export declare type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
    portfolio?: Resolver<Maybe<ResolversTypes['Portfolio']>, ParentType, ContextType>;
};
export declare type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
    addPosition?: Resolver<Maybe<ResolversTypes['Portfolio']>, ParentType, ContextType, RequireFields<MutationAddPositionArgs, 'position'>>;
    addCash?: Resolver<Maybe<ResolversTypes['Portfolio']>, ParentType, ContextType, RequireFields<MutationAddCashArgs, 'amountInUSD'>>;
    closePosition?: Resolver<Maybe<ResolversTypes['Portfolio']>, ParentType, ContextType, RequireFields<MutationClosePositionArgs, 'symbol' | 'numberOfShares'>>;
};
export declare type Resolvers<ContextType = any> = {
    Portfolio?: PortfolioResolvers<ContextType>;
    Position?: PositionResolvers<ContextType>;
    Query?: QueryResolvers<ContextType>;
    Mutation?: MutationResolvers<ContextType>;
};
/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export declare type IResolvers<ContextType = any> = Resolvers<ContextType>;
export declare const PortfolioDocument: Apollo.DocumentNode;
/**
 * __usePortfolioQuery__
 *
 * To run a query within a React component, call `usePortfolioQuery` and pass it any options that fit your needs.
 * When your component renders, `usePortfolioQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePortfolioQuery({
 *   variables: {
 *   },
 * });
 */
export declare function usePortfolioQuery(baseOptions?: Apollo.QueryHookOptions<PortfolioQuery, PortfolioQueryVariables>): Apollo.QueryResult<PortfolioQuery, Exact<{
    [key: string]: never;
}>>;
export declare function usePortfolioLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PortfolioQuery, PortfolioQueryVariables>): Apollo.QueryTuple<PortfolioQuery, Exact<{
    [key: string]: never;
}>>;
export declare type PortfolioQueryHookResult = ReturnType<typeof usePortfolioQuery>;
export declare type PortfolioLazyQueryHookResult = ReturnType<typeof usePortfolioLazyQuery>;
export declare type PortfolioQueryResult = Apollo.QueryResult<PortfolioQuery, PortfolioQueryVariables>;
